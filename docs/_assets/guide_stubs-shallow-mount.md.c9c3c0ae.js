import{g as n,f as s,z as a}from"./common-eb2a78a6.js";const t='{"title":"Stubs and Shallow Mount","frontmatter":{},"headers":[{"level":2,"title":"Stubbing a single child component","slug":"stubbing-a-single-child-component"},{"level":2,"title":"Stubbing all children components","slug":"stubbing-all-children-components"},{"level":2,"title":"Default Slots and shallow","slug":"default-slots-and-shallow"},{"level":2,"title":"mount, shallow and stubs: which one and when?","slug":"mount-shallow-and-stubs-which-one-and-when"},{"level":2,"title":"Conclusion","slug":"conclusion"}],"lastUpdated":1598528079991.3896}';var o={};const e=a('<h1 id="stubs-and-shallow-mount"><a class="header-anchor" href="#stubs-and-shallow-mount" aria-hidden="true">#</a> Stubs and Shallow Mount</h1><p>Vue Test Utils provides some advanced features for <em>stubbing</em> components. A <em>stub</em> is where you replace an existing implementation of a custom component with a dummy component that doesn&#39;t do anything at all, which can simplify an otherwise complex test. Let&#39;s see an example.</p><h2 id="stubbing-a-single-child-component"><a class="header-anchor" href="#stubbing-a-single-child-component" aria-hidden="true">#</a> Stubbing a single child component</h2><p>A common example is when you would like to test something in a component that appers very high in the component hierarchy.</p><p>In this example, we have an <code>&lt;App&gt;</code> that renders a message, as well as a <code>FetchDataFromApi</code> component that makes an API call.</p><div class="language-js"><pre><code><span class="token keyword">const</span> FetchDataFromApi <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;FetchDataFromApi&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;{{ result }}&lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/info&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> res<span class="token punctuation">.</span>data\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      result<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    FetchDataFromApi\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to Vue.js 3&lt;/h1&gt;\n      &lt;fetch-data-from-api /&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>We do not want to make the API call in this particular test, we just want to assert the message is rendered. In this case, we could use the <code>stubs</code>, which appears in the <code>global</code> mounting option.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;stubs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      stubs<span class="token operator">:</span> <span class="token punctuation">{</span>\n        FetchDataFromApi<span class="token operator">:</span> <span class="token punctuation">{</span>\n          template<span class="token operator">:</span> <span class="token string">&#39;&lt;span /&gt;&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &lt;div&gt;&lt;h1&gt;Welcome to Vue.js 3&lt;/h1&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to Vue.js 3&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Notice that the template is showing <code>&lt;span&gt;&lt;/span&gt;</code> where <code>&lt;fetch-data-from-api /&gt;</code> was? We replaced it with a stub - in this case, we provided our own implementation by passing in a <code>template</code>.</p><p>You can also get a default stub, instead of providing your own:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;stubs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      stubs<span class="token operator">:</span> <span class="token punctuation">{</span>\n        FetchDataFromApi<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &lt;div&gt;&lt;h1&gt;Welcome to Vue.js 3&lt;/h1&gt;&lt;fetch-data-from-api-stub&gt;&lt;/fetch-data-from-api-stub&gt;&lt;/div&gt;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to Vue.js 3&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>This will stub out <em>all</em> the <code>&lt;FetchDataFromApi /&gt;</code> components in the entire render tree, regardless of what level they appear at. That&#39;s why it is in the <code>global</code> mounting option.</p><h2 id="stubbing-all-children-components"><a class="header-anchor" href="#stubbing-all-children-components" aria-hidden="true">#</a> Stubbing all children components</h2><p>Sometimes you might want to stub out <em>all</em> the custom components. For example you might have a component like this:</p><div class="language-js"><pre><code><span class="token keyword">const</span> ComplexComponent <span class="token operator">=</span> <span class="token punctuation">{</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> ComplexA<span class="token punctuation">,</span> ComplexB<span class="token punctuation">,</span> ComplexC <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to Vue.js 3&lt;/h1&gt;\n      &lt;ComplexA /&gt;\n      &lt;ComplexB /&gt;\n      &lt;ComplexC /&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Imagine each of the <code>&lt;Complex&gt;</code> does something complicated, and you are only interested in testing that the <code>&lt;h1&gt;</code> is rendering the correct greeting. You could do something like:</p><div class="language-js"><pre><code><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>ComplexComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  global<span class="token operator">:</span> <span class="token punctuation">{</span>\n    stubs<span class="token operator">:</span> <span class="token punctuation">{</span>\n      ComplexA<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      ComplexB<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      ComplexC<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>But that&#39;s a lot of boilerplate. VTU has a <code>shallow</code> mounting option that will automatically stub out all the child components:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;shallow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">monut</span><span class="token punctuation">(</span>ComplexComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    shallow<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &lt;div&gt;&lt;h1&gt;Welcome to Vue.js 3&lt;/h1&gt;&lt;complex-a-stub&gt;&lt;/complex-a-stub&gt;&lt;complex-b-stub&gt;&lt;/complex-b-stub&gt;&lt;complex-c-stub&gt;&lt;/complex-c-stub&gt;&lt;/div&gt;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>TIP: If you used VTU V1, you may remember this as <code>shallowMount</code>. That method is still available, too - it&#39;s the same as writing <code>shallow: true</code>.</p></blockquote><h2 id="default-slots-and-shallow"><a class="header-anchor" href="#default-slots-and-shallow" aria-hidden="true">#</a> Default Slots and <code>shallow</code></h2><p>Since <code>shallow</code> stubs out all the content of a components, any <code>&lt;slot&gt;</code> won&#39;t get rendered when using <code>shallow</code>. While this is not a problem in most cases, there are some scenarios where this isn&#39;t ideal.</p><div class="language-js"><pre><code><span class="token keyword">const</span> CustomButton <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;button&gt;\n      &lt;slot /&gt;\n    &lt;/button&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>And you might use it like this:</p><div class="language-js"><pre><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;authenticated&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> CustomButton <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;custom-button&gt;\n      &lt;div v-if=&quot;authenticated&quot;&gt;Log out&lt;/div&gt;\n      &lt;div v-else&gt;Log in&lt;/div&gt;\n    &lt;/custom-button&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>If you are using <code>shallow</code>, the <code>&lt;slot /&gt;</code> will not be rendered, since the render function in <code>&lt;custom-button /&gt;</code> is stubbed out. That means you won&#39;t be able to verify the correct text is rendered! For this use case, you can use <code>config.renderDefaultStub</code>, which will render the default <code>&lt;slot /&gt;</code>, even when using <code>shallow</code>:</p><div class="language-js"><div class="highlight-lines"><div class="highlighted"> </div><br><br><div class="highlighted"> </div><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config<span class="token punctuation">,</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n\n<span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  config<span class="token punctuation">.</span>renderStubDefaultSlot <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  config<span class="token punctuation">.</span>renderStubDefaultSlot <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;shallow with stubs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>AnotherApp<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span>\n      authenticated<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    shallow<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Log out&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Since this behavior is global, not on a <code>mount</code> by <code>mount</code> basis, you need to remember to enable/disable it before and after each test.</p><div class="tip custom-block"><p class="custom-block-title">If you prefer this behavior, you can enable this globally by importing `config` in your test setup file, and setting `renderStubDefaultSlot` to `true`. Unfortunately, due to technical limitations, this behavior is not extended to slots other than the default slot.</p><h2 id="mount-shallow-and-stubs-which-one-and-when"><a class="header-anchor" href="#mount-shallow-and-stubs-which-one-and-when" aria-hidden="true">#</a> <code>mount</code>, <code>shallow</code> and <code>stubs</code>: which one and when?</h2><p>As a rule of thumb, the more your tests resemble the way your software is used, the more confidence they can give you.</p><p>Tests that use <code>mount</code> will render the entire component hierarchy, which is closer to what the user will experience in a real browser.</p><p>On the other hand, tests using <code>shallow</code> are focused on a specific component. <code>shallow</code> can be useful for testing advanced components in complete isolation. If you just have one or two components that are not relevant to your tests, consider using <code>mount</code> in combination with <code>stubs</code> instead of <code>shallow</code>. The more you stub, the less production-like your test becomes.</p><p>Keep in mind that whether you are doing a full mount or a shallow render, good tests focus on inputs (<code>props</code> and user interaction, such as with <code>trigger</code>) and outputs (the DOM elements that are rendered, and events), not implementation details.</p><p>So regardless of which mounting method you choose, we suggest keeping these guidelines in mind.</p><h2 id="conclusion"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><ul><li>use <code>global.stubs</code> to replace a component with a dummy one to simplify your tests</li><li>use <code>shallow: true</code> (or <code>shallowMount</code>) to stub out all child components</li><li>use <code>config.stubRenderDefaultSlot</code> to render the default <code>&lt;slot&gt;</code> for a stubbed component</li></ul></div>',29);o.render=function(a,t,o,p,c,l){return s(),n("div",null,[e])};export default o;export{t as __pageData};
