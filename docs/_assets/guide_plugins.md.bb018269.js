import{g as n,f as s,z as a}from"./common-eb2a78a6.js";const t='{"title":"Plugins","frontmatter":{},"headers":[{"level":2,"title":"Plugins","slug":"plugins"},{"level":2,"title":"Using a Plugin","slug":"using-a-plugin"},{"level":2,"title":"Writing a Plugin","slug":"writing-a-plugin"},{"level":3,"title":"Basic Plugin","slug":"basic-plugin"},{"level":3,"title":"Data Test ID Plugin","slug":"data-test-id-plugin"},{"level":2,"title":"Featuring Your Plugin","slug":"featuring-your-plugin"}],"lastUpdated":1598523040076.2913}';var e={};const p=a('<h2 id="plugins"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h2><p>Plugins add global-level functionality to Vue Test Utils&#39; API. This is the official way to extend Vue Test Utils&#39; API with custom logic, methods, or functionality.</p><p>If you&#39;re missing a bit of functionality, consider writing a plugin to extend Vue Test Utils&#39; API.</p><p>Some use cases for plugins:</p><ol><li>Aliasing existing public methods</li><li>Attaching matchers to the Wrapper instance</li><li>Attaching functionality to the Wrapper</li></ol><h2 id="using-a-plugin"><a class="header-anchor" href="#using-a-plugin" aria-hidden="true">#</a> Using a Plugin</h2><p>Install plugins by calling the <code>config.plugins.VueWrapper.install()</code> method . This has to be done before you call <code>mount</code>.</p><p>The <code>install()</code> method will receive an instance of <code>WrapperAPI</code> containing both public and private properties of the instance.</p><div class="language-js"><pre><code><span class="token comment">// setup.js file</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n\n<span class="token comment">// locally defined plugin, see &quot;Writing a Plugin&quot;</span>\n<span class="token keyword">import</span> MyPlugin <span class="token keyword">from</span> <span class="token string">&#39;./myPlugin&#39;</span>\n\n<span class="token comment">// Install a plugin onto VueWrapper</span>\nconfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>VueWrapper<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">)</span>\n</code></pre></div><p>You can optionally pass in some options:</p><div class="language-js"><pre><code>config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>VueWrapper<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">,</span> <span class="token punctuation">{</span> someOption<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Your plugin should be installed once. If you are using Jest, this should be in your Jest config&#39;s <code>setupFiles</code> or <code>setupFilesAfterEnv</code> file.</p><p>Some plugins automatically call <code>config.plugins.VueWrapper.install()</code> when they&#39;re imported. This is common if they&#39;re extending multiple interfaces at once. Follow the instructions of the plugin you&#39;re installing.</p><p>Check out the <a href="https://vue-community.org/guide/ecosystem/testing.html" target="_blank" rel="noopener noreferrer">Vue Community Guide</a> or <a href="https://github.com/vuejs/awesome-vue#test" target="_blank" rel="noopener noreferrer">awesome-vue</a> for a collection of community-contributed plugins and libraries.</p><h2 id="writing-a-plugin"><a class="header-anchor" href="#writing-a-plugin" aria-hidden="true">#</a> Writing a Plugin</h2><p>A Vue Test Utils plugin is simply a function that receives the mounted <code>VueWrapper</code> or <code>DOMWrapper</code> instance and can modify it.</p><h3 id="basic-plugin"><a class="header-anchor" href="#basic-plugin" aria-hidden="true">#</a> Basic Plugin</h3><p>Below is a simple plugin to add a convenient alias to map <code>wrapper.element</code> to <code>wrapper.$el</code></p><div class="language-js"><pre><code><span class="token comment">// setup.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">myAliasPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">wrapper</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    $el<span class="token operator">:</span> wrapper<span class="token punctuation">.</span>element <span class="token comment">// simple aliases</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Call install on the type you want to extend</span>\n<span class="token comment">// You can write a plugin for any value inside of config.plugins</span>\nconfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>VueWrapper<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>myAliasPlugin<span class="token punctuation">)</span>\n</code></pre></div><p>And in your spec, you&#39;ll be able to use your plugin after <code>mount</code>.</p><div class="language-js"><pre><code><span class="token comment">// component.spec.js</span>\n<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h1&gt;ðŸ”Œ Plugin&lt;/h1&gt;</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span> <span class="token comment">// ðŸ”Œ Plugin</span>\n</code></pre></div><h3 id="data-test-id-plugin"><a class="header-anchor" href="#data-test-id-plugin" aria-hidden="true">#</a> Data Test ID Plugin</h3><p>The below plugin adds a method <code>findByTestId</code> to the <code>VueWrapper</code> instance. This encourages using a selector strategy relying on test-only attributes on your Vue Components.</p><p>Usage:</p><p><code>MyComponent.vue</code>:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyForm</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-testid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyInput</span> <span class="token attr-name">data-testid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name-input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyForm</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><code>MyComponent.spec.js</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span>\nwrapper<span class="token punctuation">.</span><span class="token function">findByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;name-input&#39;</span><span class="token punctuation">)</span> <span class="token comment">// returns a VueWrapper or DOMWrapper</span>\n</code></pre></div><p>Implementation of the plugin:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils-next&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">DataTestIdPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">wrapper</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">findByTestId</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> dataSelector <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-testid=&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>selector<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;]</span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">const</span> element <span class="token operator">=</span> wrapper<span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>dataSelector<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DOMWrapper</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">createWrapperError</span><span class="token punctuation">(</span><span class="token string">&#39;DOMWrapper&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    findByTestId\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>VueWrapper<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>DataTestIdPlugin<span class="token punctuation">)</span>\n</code></pre></div><h2 id="featuring-your-plugin"><a class="header-anchor" href="#featuring-your-plugin" aria-hidden="true">#</a> Featuring Your Plugin</h2><p>If you&#39;re missing functionality, consider writing a plugin to extend Vue Test Utils and submit it to be featured at <a href="https://vue-community.org/guide/ecosystem/testing.html" target="_blank" rel="noopener noreferrer">Vue Community Guide</a> or <a href="https://github.com/vuejs/awesome-vue#test" target="_blank" rel="noopener noreferrer">awesome-vue</a>.</p>',32);e.render=function(a,t,e,o,c,l){return s(),n("div",null,[p])};export default e;export{t as __pageData};
