import{g as n,f as s,z as a}from"./common-eb2a78a6.js";const t='{"title":"Testing with Vue Router","frontmatter":{},"headers":[{"level":2,"title":"Testing with Vue Router","slug":"testing-with-vue-router"},{"level":2,"title":"Using a Mock Router","slug":"using-a-mock-router"},{"level":2,"title":"With a Real Router","slug":"with-a-real-router"},{"level":2,"title":"Conclusion","slug":"conclusion"}],"lastUpdated":1598523040079.2598}';var o={};const p=a('<h2 id="testing-with-vue-router"><a class="header-anchor" href="#testing-with-vue-router" aria-hidden="true">#</a> Testing with Vue Router</h2><p>Vue Test Utils does not provide any special functions to assist with testing components that rely on Vue Router. This article will present two ways to test an application using Vue Router - using the real Vue Router, which is more production like but also may lead to complexity when testing larger applications, and by using a mock router, allowing for more fine grained control of the testing environment.</p><p>Let&#39;s look at how you can test with a mock router, since that is generally the simplest way to test components dependening on Vue Router. Then we will take a look at what is involved if you&#39;d like to use are real router.</p><h2 id="using-a-mock-router"><a class="header-anchor" href="#using-a-mock-router" aria-hidden="true">#</a> Using a Mock Router</h2><p>You can use a mock router to avoid caring about the implementation details of Vue Router in your unit tests. Instead of using a real Vue Router instance, We can create our own minimal mock version which only implements the features we are interested in. We can do this using a combination of <code>jest.mock</code> (if you are using Jest), and <code>global.components</code>.</p><p>When we mock out a dependency, it&#39;s usually because we are not interested in testing that dependencies behavior. In this case, we do not want to test clicking <code>&lt;router-link&gt;</code> (which is really just an <code>&lt;a&gt;</code> tag) navigates to the correct page - of course it does! In this example, we might be interested in ensuring that the <code>&lt;a&gt;</code> has the correct <code>to</code> attribute, though. This may seem trivial, but in a larger application with much more complex routing, it can be worth ensuring links are correct (especially if they are highly dynamic).</p><p>To illustrate this, let&#39;s see a different example, where mocking the router becomes much more attractive.</p><div class="language-js"><pre><code><span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;button @click=&quot;redirect&quot;&gt;Click to Edit&lt;/button&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;authenticated&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/edit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/404&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>This component shows a button that will redirect an authenticated user to the edit post page (based on the current route parameters). An unauthenticated user should be redirected to a <code>/404</code> route. We could use a real router, then navigate to the correct route for this component, then after clicking the button assert that the correct page is rendered... however, this is a lot of setup for a relatively simple test. At it&#39;s core, the test we want to write is &quot;if authenticated, redirect to X, otherwise redirect to Y&quot;. Let&#39;s see how we might accomplish this by mocking the routing using the <code>global.mocks</code> property:</p><div class="language-js"><pre><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;component handles routing correctly&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;allows authenticated user to edit a post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> mockRoute <span class="token operator">=</span> <span class="token punctuation">{</span>\n      params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> mockRouter <span class="token operator">=</span> <span class="token punctuation">{</span>\n      push<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      props<span class="token operator">:</span> <span class="token punctuation">{</span>\n        authenticated<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      global<span class="token operator">:</span> <span class="token punctuation">{</span>\n        mocks<span class="token operator">:</span> <span class="token punctuation">{</span>\n          $route<span class="token operator">:</span> mockRoute<span class="token punctuation">,</span>\n          $router<span class="token operator">:</span> mockRouter\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token function">expect</span><span class="token punctuation">(</span>mockRouter<span class="token punctuation">.</span>push<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token string">&#39;/posts/1/edit&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;redirect an unauthenticated user to 404&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> mockRoute <span class="token operator">=</span> <span class="token punctuation">{</span>\n      params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        id<span class="token operator">:</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> mockRouter <span class="token operator">=</span> <span class="token punctuation">{</span>\n      push<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      props<span class="token operator">:</span> <span class="token punctuation">{</span>\n        authenticated<span class="token operator">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      global<span class="token operator">:</span> <span class="token punctuation">{</span>\n        mocks<span class="token operator">:</span> <span class="token punctuation">{</span>\n          $route<span class="token operator">:</span> mockRoute<span class="token punctuation">,</span>\n          $router<span class="token operator">:</span> mockRouter\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token function">expect</span><span class="token punctuation">(</span>mockRouter<span class="token punctuation">.</span>push<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token string">&#39;/404&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>By combining <code>global.mocks</code> to provide the necessary dependencies (<code>this.$route</code> and <code>this.$router</code>) we were able to set the test environment in an ideal state for this particular test. We were then able to use <code>jest.fn()</code> to monitor how many times, and with which arguments, <code>this.$router.push</code> was called with. Best of all, we don&#39;t have to deal with the complexity or caveats of Vue Router in our test, when really what we are concerned with testing is the logic behind the routing, not the routing itself.</p><p>Of course, you still need to test the entire system in an end-to-end manner with a real router at some point. You could consider a framework like <a href="https://www.cypress.io/" target="_blank" rel="noopener noreferrer">Cypress</a> for full system tests using a real browser.</p><h2 id="with-a-real-router"><a class="header-anchor" href="#with-a-real-router" aria-hidden="true">#</a> With a Real Router</h2><p>Now we have seen how to use am ock router, let&#39;s take a look at what is involved when using the real Vue Router. We will look at a test for a blogging application that uses Vue Router. The posts are listed on the <code>/posts</code> route. The components are as follows:</p><div class="language-js"><pre><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;router-link to=&quot;/posts&quot;&gt;Go to posts&lt;/router-link&gt;\n    &lt;router-view /&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> Posts <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;h1&gt;Posts&lt;/h1&gt;\n    &lt;ul&gt;\n      &lt;li v-for=&quot;posts in posts&quot; :key=&quot;post.id&quot;&gt;\n        {{ post.name }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      posts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Testing Vue Router&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>The root of the app displays a <code>&lt;router-link&gt;</code> leading to <code>/posts</code>, where we list the posts in an unordered list.</p><p>The router looks like this:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> <span class="token punctuation">{</span>\n        template<span class="token operator">:</span> <span class="token string">&#39;Welcome to the blogging app&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/posts&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> Posts\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The best way to illustrate how to test an app using Vue Router is to let the warnings guide us. The following minimal test is enough to get us going:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;routing&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the blogging app&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The test fails. It also prints two warnings:</p><div class="language-sh"><pre><code>console.warn node_modules/@vue/runtime-core/dist/runtime-core.cjs.js:39\n  [Vue warn]: Failed to resolve component: router-link\n    at &lt;Anonymous ref=&quot;VTU_COMPONENT&quot; &gt;\n    at &lt;VTUROOT&gt;\n\nconsole.warn node_modules/@vue/runtime-core/dist/runtime-core.cjs.js:39\n  [Vue warn]: Failed to resolve component: router-view\n    at &lt;Anonymous ref=&quot;VTU_COMPONENT&quot; &gt;\n    at &lt;VTUROOT&gt;\n</code></pre></div><p>The <code>&lt;router-link&gt;</code> and <code>&lt;router-view&gt;</code> component are not found. We need to install Vue Router! Since Vue Router is a plugin, we install it using the <code>global.plugins</code> mounting option:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// omitted for brevity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;routing&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>router<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the blogging app&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Those two warnings are now gone - but now we have another warning:</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span>warn node_modules<span class="token operator">/</span>vue<span class="token operator">-</span>router<span class="token operator">/</span>dist<span class="token operator">/</span>vue<span class="token operator">-</span>router<span class="token punctuation">.</span>cjs<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">225</span>\n  <span class="token punctuation">[</span>Vue Router warn<span class="token punctuation">]</span><span class="token operator">:</span> Unexpected error when starting the router<span class="token operator">:</span> TypeError<span class="token operator">:</span> Cannot read property <span class="token string">&#39;_history&#39;</span> <span class="token keyword">of</span> <span class="token keyword">null</span>\n</code></pre></div><p>Although it&#39;s not entirely clear from the warning, it&#39;s related to the fact that Vue Router 4 handles routing asynchronously, and before anything is rendered, the router must be in a &quot;ready&quot; state. For this reason Vue Router provides an <code>isReady</code> function, which we can <code>await</code> to ensure the router is ready and the initial navigation has finished before rendering anything.</p><p>In web mode (which we are using, since we passed the <code>history: createWebHistory()</code> option when creating the router), the router will use the initial location to trigger an initial navigation automatically. For this reason, why we need to <code>await router.isReady()</code> - to ensure the initial navigation has completed before the test continues.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;routing&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>router<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the blogging app&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The test is now passing! It was quite a bit of work - this is one of the reasons it might make more sense to use a mock router for your tests.</p><p>Now the initial setup has been handled, let&#39;s navigate to <code>/posts</code> and make an assertion to ensure the routing is working as expected:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;routing&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>router<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the blogging app&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Testing Vue Router&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Again, another somewhat cryptic error:</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span>warn node_modules<span class="token operator">/</span>@vue<span class="token operator">/</span>runtime<span class="token operator">-</span>core<span class="token operator">/</span>dist<span class="token operator">/</span>runtime<span class="token operator">-</span>core<span class="token punctuation">.</span>cjs<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">39</span>\n  <span class="token punctuation">[</span>Vue warn<span class="token punctuation">]</span><span class="token operator">:</span> Unhandled error during execution <span class="token keyword">of</span> native event handler\n    at <span class="token operator">&lt;</span>RouterLink to<span class="token operator">=</span><span class="token string">&quot;/posts&quot;</span> <span class="token operator">&gt;</span>\n    at <span class="token operator">&lt;</span>Anonymous ref<span class="token operator">=</span><span class="token string">&quot;VTU_COMPONENT&quot;</span> <span class="token operator">&gt;</span>\n    at <span class="token operator">&lt;</span><span class="token constant">VTUROOT</span><span class="token operator">&gt;</span>\n\nconsole<span class="token punctuation">.</span>error node_modules<span class="token operator">/</span>@vue<span class="token operator">/</span>runtime<span class="token operator">-</span>core<span class="token operator">/</span>dist<span class="token operator">/</span>runtime<span class="token operator">-</span>core<span class="token punctuation">.</span>cjs<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">211</span>\n  TypeError<span class="token operator">:</span> Cannot read property <span class="token string">&#39;_history&#39;</span> <span class="token keyword">of</span> <span class="token keyword">null</span>\n</code></pre></div><p>Again, due to Vue Router 4&#39;s new asynchronous nature, we need to <code>await</code> the routing to complete before making any assertions. In this case, however, there is not <code>router.hasNavigated</code> hook we can await on. One alternative is to use the <code>flushPromises</code> function exported from Vue Test Utils:</p><div class="language-js"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;routing&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>router<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the blogging app&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> <span class="token function">flushPromises</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;Testing Vue Router&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>It <em>finally</em> passes. Great! This is all very manual, however - and this is for a tiny, trivial app. This is the reason using a mock router is a common approach when testing Vue components using Vue Test Utils.</p><h2 id="conclusion"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><ul><li>Vue Router 4 is asynchronous. This must be considered when testing in a jsdom environment.</li><li>You can use Vue Router in your tests. There are some caveats, but there is no technical reason why you cannot use a real router.</li><li>For more complex applications, consider mocking the router dependency and focus on testing the underlying logic.</li><li>Make use of your test runner&#39;s stubbing/mocking functionality where possible.</li><li>Use <code>global.mocks</code> to mock global dependencies, such as <code>this.$route</code> and <code>this.$router</code>.</li></ul>',39);o.render=function(a,t,o,e,c,u){return s(),n("div",null,[p])};export default o;export{t as __pageData};
