import{g as n,f as s,z as a}from"./common-eb2a78a6.js";const t='{"title":"Event Handling","frontmatter":{},"headers":[{"level":2,"title":"The Counter component","slug":"the-counter-component"},{"level":2,"title":"Asserting the emitted events","slug":"asserting-the-emitted-events"},{"level":2,"title":"Asserting the arguments of the event","slug":"asserting-the-arguments-of-the-event"},{"level":2,"title":"Asserting complex events","slug":"asserting-complex-events"},{"level":2,"title":"Composition API","slug":"composition-api"},{"level":2,"title":"Conclusion","slug":"conclusion"}],"lastUpdated":1598523040072.4658}';var e={};const p=a('<h1 id="event-handling"><a class="header-anchor" href="#event-handling" aria-hidden="true">#</a> Event Handling</h1><p>Vue components interact with each other via props and by emitting events by calling <code>$emit</code>. In this guide, we look at how to verify events are correctly emitted using the <code>emitted()</code> function.</p><h2 id="the-counter-component"><a class="header-anchor" href="#the-counter-component" aria-hidden="true">#</a> The Counter component</h2><p>Here is a simple <code>&lt;Counter&gt;</code> component. It features a button that, when clicked, increments an internal count variable and emits its value:</p><div class="language-js"><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;handleClick&quot;&gt;Increment&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>To fully test this component, we should verify that an <code>increment</code> event with the latest <code>count</code> value is emitted.</p><h2 id="asserting-the-emitted-events"><a class="header-anchor" href="#asserting-the-emitted-events" aria-hidden="true">#</a> Asserting the emitted events</h2><p>To do so, we will rely on the <code>emitted()</code> method. It <strong>returns an object with all the events the component has emitted</strong>, and their arguments in an array. Let&#39;s see how it works:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>\n\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>If you haven&#39;t seen <code>trigger()</code> before, don&#39;t worry. It&#39;s used to simulate user interaction. You can learn more in <a href="/guide/forms.html">Forms</a>.</p></blockquote><p>The first thing to notice is that <code>emitted()</code> returns an object, where each key matches an emitted event. In this case, <code>increment</code>.</p><p>This test should pass. We made sure we emitted an event with the appropriate name.</p><h2 id="asserting-the-arguments-of-the-event"><a class="header-anchor" href="#asserting-the-arguments-of-the-event" aria-hidden="true">#</a> Asserting the arguments of the event</h2><p>This is good - but we can do better! We need to check that we emit the right arguments when <code>this.$emit(&#39;increment&#39;, this.count)</code> is called.</p><p>Our next step is to assert that the event contains the <code>count</code> value. We do so by passing an argument to <code>emitted()</code>.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">Â </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event with count when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>\n\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// `emitted()` accepts an argument. It returns an array with all the</span>\n  <span class="token comment">// occurrences of `this.$emit(&#39;increment&#39;)`.</span>\n  <span class="token keyword">const</span> incrementEvent <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// We have &quot;clicked&quot; twice, so the array of `increment` should</span>\n  <span class="token comment">// have two values.</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Assert the result of the first click.</span>\n  <span class="token comment">// Notice that the value is an array.</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Then, the result of the second one.</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>incrementEvent<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Let&#39;s recap and break down the output of <code>emitted()</code>. Each of these keys contains the different values emitted during the test:</p><div class="language-js"><pre><code><span class="token comment">// console.log(wrapper.emitted(&#39;increment&#39;))</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// first time it is called, `count` is 1</span>\n  <span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// second time it is called, `count` is 2</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h2 id="asserting-complex-events"><a class="header-anchor" href="#asserting-complex-events" aria-hidden="true">#</a> Asserting complex events</h2><p>Imagine that now our <code>&lt;Counter&gt;</code> component needs to emit an object with additional information. For instance, we need to tell any parent component listening to the <code>@increment</code> event if <code>count</code> is even or odd:</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">Â </div><div class="highlighted">Â </div><div class="highlighted">Â </div><div class="highlighted">Â </div><br><br><br><br></div><pre><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button @click=&quot;handleClick&quot;&gt;Increment&lt;/button&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>\n\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">,</span>\n        isEven<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>As we did before, we need to trigger the <code>click</code> event on the <code>&lt;button&gt;</code> element. Then, we use <code>emitted(&#39;increment&#39;)</code> to make sure the right values are emitted.</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;emits an event with count when clicked&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>\n\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n  wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// We have &quot;clicked&quot; twice, so the array of `increment` should</span>\n  <span class="token comment">// have two values.</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Then, we can make sure each element of `wrapper.emitted(&#39;increment&#39;)`</span>\n  <span class="token comment">// contains an array with the expected object.</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      isEven<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      isEven<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Testing complex event payloads such as Objects is no different from testing simple values such as numbers or strings.</p><h2 id="composition-api"><a class="header-anchor" href="#composition-api" aria-hidden="true">#</a> Composition API</h2><p>If you are using the Composition API, you will be calling <code>context.emit()</code> instead of <code>this.$emit()</code>. <code>emitted()</code> captures events from both, so you can test your component using the same techniques described here.</p><h2 id="conclusion"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><ul><li>Use <code>emitted()</code> to access the events emitted from a Vue component.</li><li><code>emitted(eventName)</code> returns an array, where each element represents one event emitted.</li><li>Arguments are stored in <code>emitted(eventName)[index]</code> in an array in the same order they are emitted.</li></ul>',28);e.render=function(a,t,e,o,c,u){return s(),n("div",null,[p])};export default e;export{t as __pageData};
